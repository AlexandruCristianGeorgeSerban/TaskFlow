package com.taskflow.action;

import com.taskflow.persistence.CategoryPersistence;
import com.taskflow.service.TaskService;
import com.taskflow.ui.MainFrame;

import javax.swing.*;
import java.awt.event.ActionEvent;
import java.io.File;
import java.util.List;

/** Import XML și înlocuiește conținutul */
public class ImportAction extends AbstractAction {
    private static final long serialVersionUID = 1L;
    private final MainFrame frame;
    private final CategoryPersistence loader;

    public ImportAction(MainFrame frame, CategoryPersistence loader) {
        super("Import XML");
        this.frame = frame;
        this.loader = loader;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        JFileChooser chooser = new JFileChooser();
        if (chooser.showOpenDialog(frame) == JFileChooser.APPROVE_OPTION) {
            File file = chooser.getSelectedFile();
            try {
                List<?> cats = loader.load(file);
                // wrap sub un root
                frame.getTaskService().clearRoots();
                frame.getTaskService().addRoot(frame.createImportedRoot((List)cats));
                frame.refreshTreeAll();
            } catch (Exception ex) {
                frame.showError(ex);
            }
        }
    }
    
 // la finalul clasei MainFrame:

    /** Pentru ImportAction/ExportAction/Togle… */
    public TaskService getTaskService() {
        return taskService;
    }

    /** Pentru ResetOrderAction */
    public JTable getTaskTable() {
        return taskTable;
    }
    public TaskTableModel getTaskTableModel() {
        return taskTableModel;
    }
    public List<Task> getMasterTasks() {
        return masterTasks;
    }

    /** Pentru Add/ImportAction: reconstruieşte un root "Imported" */
    public RootGroup createImportedRoot(List<Category> cats) {
        RootGroup imp = new RootGroup("Imported", "#0077CC");
        imp.getCategories().addAll(cats);
        return imp;
    }

    /** Pentru DeleteFileAction */
    public boolean deleteRecursively(File f) {
        if (f.isDirectory()) {
            File[] children = f.listFiles();
            if (children != null) {
                for (File c : children) {
                    if (!deleteRecursively(c)) return false;
                }
            }
        }
        return f.delete();
    }

    /** Pentru toate acţiunile care modifică datele */
    public void refreshTreeAll() {
        categoryTreeModel.updateRoots(taskService.getAllRoots());
        showTasks(getAllTasks());
    }

    /** Opţional, dacă foloseşti refreshAfterChange în acţiuni */
    public void refreshAfterChange(Category cat) {
        categoryTreeModel.updateRoots(taskService.getAllRoots());
        showTasks(getTasksFromCategory(cat));
    }

    /** Afişează un dialog de eroare accesibil acţiunilor */
    public void showError(Exception ex) {
        JOptionPane.showMessageDialog(this,
            ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
}
