package com.taskflow.persistence;

import com.taskflow.model.Category;
import com.taskflow.model.RootGroup;
import com.taskflow.model.Task;
import org.xml.sax.Attributes;
import org.xml.sax.helpers.DefaultHandler;

import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;
import java.io.File;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

/**
 * Handler SAX care încarcă lista de RootGroup, fiecare conţinând categoriile şi task‑urile sale.
 */
public class XmlSaxHandler extends DefaultHandler implements RootGroupPersistence {
    private final List<RootGroup> roots = new ArrayList<>();
    private RootGroup currentRoot;
    private Category currentCategory;
    private Task currentTask;
    private StringBuilder content = new StringBuilder();

    @Override
    public List<RootGroup> loadRootGroups(File file) throws Exception {
        SAXParser parser = SAXParserFactory.newInstance().newSAXParser();
        parser.parse(file, this);
        return roots;
    }

    @Override
    public void startElement(String uri, String localName, String qName, Attributes atts) {
        content.setLength(0);
        switch (qName) {
            case "root":
                String rName = atts.getValue("name");
                String rColor = atts.getValue("color");
                currentRoot = new RootGroup(rName, rColor);
                roots.add(currentRoot);
                break;
            case "category":
                String cName = atts.getValue("name");
                String cColor = atts.getValue("color");
                currentCategory = new Category(cName, cColor);
                currentRoot.getCategories().add(currentCategory);
                break;
            case "task":
                String tId      = atts.getValue("id");
                String tTitle   = atts.getValue("title");
                boolean tComp   = Boolean.parseBoolean(atts.getValue("completed"));
                currentTask     = new Task();
                currentTask.setId(tId);
                currentTask.setTitle(tTitle);
                currentTask.setCompleted(tComp);
                break;
            // description și dueDate se vor citi în characters()
        }
    }

    @Override
    public void characters(char[] ch, int start, int length) {
        content.append(ch, start, length);
    }

    @Override
    public void endElement(String uri, String localName, String qName) {
        switch (qName) {
            case "description":
                currentTask.setDescription(content.toString().trim());
                break;
            case "dueDate":
                String[] p = content.toString().trim().split("-");
                Calendar cal = Calendar.getInstance();
                cal.set(Integer.parseInt(p[0]), Integer.parseInt(p[1]) - 1, Integer.parseInt(p[2]));
                currentTask.setDueDate(cal);
                break;
            case "task":
                currentCategory.addTask(currentTask);
                currentTask = null;
                break;
            case "category":
                currentCategory = null;
                break;
            case "root":
                currentRoot = null;
                break;
        }
    }
}
