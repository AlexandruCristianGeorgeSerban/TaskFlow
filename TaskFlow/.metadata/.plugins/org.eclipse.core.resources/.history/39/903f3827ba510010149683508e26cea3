package com.taskflow.ui;

import com.taskflow.model.Category;
import com.taskflow.model.Task;
import com.taskflow.persistence.XmlDomHandler;
import com.taskflow.persistence.XmlSaxHandler;

import javax.swing.*;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.io.File;
import java.util.List;

/**
 * Main application window.
 */
public class MainFrame extends JFrame {
	private static final long serialVersionUID = 1L;
	
    private TaskTableModel taskTableModel;
    private CategoryTreeModel categoryTreeModel;
    private JTable taskTable;
    private JTree categoryTree;
    private JTextField filterField;

    public MainFrame(List<Category> categories) {
        super("TaskFlow");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(800, 600);
        setLocationRelativeTo(null);

        // Models
        taskTableModel = new TaskTableModel(getAllTasks(categories));
        categoryTreeModel = new CategoryTreeModel(categories);

        // Components
        taskTable = new JTable(taskTableModel);
        categoryTree = new JTree(categoryTreeModel);
        filterField = new JTextField(15);

        // Layout
        JSplitPane splitPane = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT,
                new JScrollPane(categoryTree), new JScrollPane(taskTable));
        splitPane.setDividerLocation(200);

        JPanel topPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        topPanel.add(new JLabel("Filter:"));
        topPanel.add(filterField);

        add(topPanel, BorderLayout.NORTH);
        add(splitPane, BorderLayout.CENTER);

        // Menu
        setJMenuBar(createMenuBar());

        // Filter listener
        filterField.getDocument().addDocumentListener(new DocumentListener() {
            @Override public void insertUpdate(DocumentEvent e) { applyFilter(); }
            @Override public void removeUpdate(DocumentEvent e) { applyFilter(); }
            @Override public void changedUpdate(DocumentEvent e) { applyFilter(); }
        });
    }

    private JMenuBar createMenuBar() {
        JMenuBar menuBar = new JMenuBar();
        JMenu fileMenu = new JMenu("File");

        JMenuItem importItem = new JMenuItem(new AbstractAction("Import XML") {
        	private static final long serialVersionUID = 1L;
        	
            @Override
            public void actionPerformed(ActionEvent e) {
                JFileChooser chooser = new JFileChooser();
                if (chooser.showOpenDialog(MainFrame.this) == JFileChooser.APPROVE_OPTION) {
                    File file = chooser.getSelectedFile();
                    try {
                        List<Category> cats = new XmlSaxHandler().loadCategories(file);
                        refreshData(cats);
                    } catch (Exception ex) {
                        showError(ex);
                    }
                }
            }
        });
        JMenuItem exportItem = new JMenuItem(new AbstractAction("Export XML") {
        	private static final long serialVersionUID = 1L;
        	
            @Override
            public void actionPerformed(ActionEvent e) {
                JFileChooser chooser = new JFileChooser();
                if (chooser.showSaveDialog(MainFrame.this) == JFileChooser.APPROVE_OPTION) {
                    File file = chooser.getSelectedFile();
                    try {
                        XmlDomHandler.saveCategories(categoryTreeModel.getCategories(), file);
                    } catch (Exception ex) {
                        showError(ex);
                    }
                }
            }
        });

        fileMenu.add(importItem);
        fileMenu.add(exportItem);
        menuBar.add(fileMenu);
        return menuBar;
    }

    private void applyFilter() {
        String text = filterField.getText().trim();
        if (text.isEmpty()) {
            taskTableModel.setTasks(getAllTasks(categoryTreeModel.getCategories()));
        } else {
            taskTableModel.setTasks(taskTableModel.filter(text));
        }
    }

    private List<Task> getAllTasks(List<Category> categories) {
        return categories.stream()
                .flatMap(c -> c.getTasks().stream())
                .toList();
    }

    private void refreshData(List<Category> categories) {
        categoryTreeModel.updateCategories(categories);
        taskTableModel.setTasks(getAllTasks(categories));
    }

    private void showError(Exception ex) {
        JOptionPane.showMessageDialog(this,
                ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
}
