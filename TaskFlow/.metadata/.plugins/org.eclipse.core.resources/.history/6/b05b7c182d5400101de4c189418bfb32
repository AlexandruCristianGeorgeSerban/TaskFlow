package com.taskflow.ui;

import com.taskflow.model.Category;
import com.taskflow.model.RootGroup;
import com.taskflow.model.Task;
import com.taskflow.service.TaskService;
import com.taskflow.action.AddCategoryAction;
import com.taskflow.action.AddRootAction;
import com.taskflow.action.AddTaskAction;
import com.taskflow.action.DeleteFileAction;
import com.taskflow.action.EditCategoryAction;
import com.taskflow.action.EditRootAction;
import com.taskflow.action.EditTaskAction;
import com.taskflow.action.ExportAction;
import com.taskflow.action.ImportAction;
import com.taskflow.action.ResetOrderAction;
import com.taskflow.action.ToggleCompletedAction;

import javax.swing.*;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.TableRowSorter;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreePath;
import java.awt.*;
import java.awt.event.ActionEvent;       // <— lipsea!
import java.io.File;
import java.util.List;

/** Main application window. */
@SuppressWarnings("serial")
public class MainFrame extends JFrame {
    private final TaskService taskService;
    private final TaskTableModel taskTableModel;
    private final CategoryTreeModel categoryTreeModel;
    private final JTable taskTable;
    private final JTree categoryTree;
    private final JTextField filterField;
    private final List<Task> masterTasks;

    public MainFrame(TaskService service) {
        super("TaskFlow");
        this.taskService       = service;
        this.taskTableModel    = new TaskTableModel(getAllTasks());
        this.masterTasks       = List.copyOf(getAllTasks());
        this.categoryTreeModel = new CategoryTreeModel(taskService.getAllRoots());

        // — Components —
        taskTable = new JTable(taskTableModel);
        taskTable.setRowSorter(new TableRowSorter<>(taskTableModel));

        categoryTree = new JTree(categoryTreeModel);
        categoryTree.setRootVisible(false);
        categoryTree.setShowsRootHandles(true);
        categoryTree.setCellRenderer(new ColorTreeCellRenderer());

        filterField = new JTextField(15);

        // — Layout —
        JSplitPane split = new JSplitPane(
            JSplitPane.HORIZONTAL_SPLIT,
            new JScrollPane(categoryTree),
            new JScrollPane(taskTable)
        );
        split.setDividerLocation(200);

        JPanel top = new JPanel(new FlowLayout(FlowLayout.LEFT));
        top.add(new JLabel("Filter:"));
        top.add(filterField);

        setLayout(new BorderLayout());
        add(top,    BorderLayout.NORTH);
        add(split,  BorderLayout.CENTER);

        // — Menus —
        JMenuBar mb = new JMenuBar();
        mb.add(createFileMenu());
        mb.add(createRootMenu());
        mb.add(createCategoryMenu());
        mb.add(createTaskMenu());
        setJMenuBar(mb);

        // — Filter Listener —
        filterField.getDocument().addDocumentListener(new DocumentListener() {
            public void insertUpdate(DocumentEvent e)  { applyFilter(); }
            public void removeUpdate(DocumentEvent e)  { applyFilter(); }
            public void changedUpdate(DocumentEvent e) { applyFilter(); }
        });

        // — Tree Selection (single click) —
        categoryTree.addTreeSelectionListener(e -> {
            TreePath p = e.getNewLeadSelectionPath();
            if (p == null) return;
            Object o = ((DefaultMutableTreeNode)p.getLastPathComponent()).getUserObject();
            if      (o instanceof RootGroup) showTasks(getTasksFromRoot((RootGroup)o));
            else if (o instanceof Category ) showTasks(((Category)o).getTasks());
        });

        // — Double-click on Task —
        categoryTree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent e) {
                if (e.getClickCount() == 2) {
                    TreePath p = categoryTree.getPathForLocation(e.getX(), e.getY());
                    if (p != null) {
                        Object o = ((DefaultMutableTreeNode)p.getLastPathComponent()).getUserObject();
                        if (o instanceof Task) showTasks(List.of((Task)o));
                    }
                }
            }
        });

        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setSize(800, 600);
        setLocationRelativeTo(null);
    }

    // — Expose for Actions —
    public TaskService getTaskService()           { return taskService; }
    public JTable getTaskTable()                  { return taskTable; }
    public TaskTableModel getTaskTableModel()     { return taskTableModel; }
    public List<Task> getMasterTasks()            { return masterTasks; }
    public RootGroup createImportedRoot(List<Category> cats) {
        RootGroup imp = new RootGroup("Imported", "#0077CC");
        imp.getCategories().addAll(cats);
        return imp;
    }
    public boolean deleteRecursively(File f) {
        if (f.isDirectory()) {
            File[] ch = f.listFiles();
            if (ch != null) for (File c: ch) if (!deleteRecursively(c)) return false;
        }
        return f.delete();
    }
    public void refreshTreeAll() {
        categoryTreeModel.updateRoots(taskService.getAllRoots());
        showTasks(getAllTasks());
        expandAll();
    }
    public void refreshAfterChange(Category cat) {
        categoryTreeModel.updateRoots(taskService.getAllRoots());
        if (cat!=null) showTasks(cat.getTasks());
        else           showTasks(getAllTasks());
        expandAll();
    }
    public void showError(Exception ex) {
        JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }

    // — Menus & Inline Delete Actions —
    private JMenu createFileMenu() {
        JMenu m = new JMenu("File");
        m.add(new ImportAction(this));
        m.add(new ExportAction(this));
        m.addSeparator();
        m.add(new DeleteFileAction(this));
        return m;
    }

    private JMenu createRootMenu() {
        JMenu m = new JMenu("Root");
        m.add(new AddRootAction(this, taskService));
        m.add(new EditRootAction(this, taskService));
        m.addSeparator();
        m.add(new AbstractAction("Delete Root") {
            public void actionPerformed(ActionEvent e) {
                TreePath sel = categoryTree.getSelectionPath();
                if (sel == null) return;
                Object o = ((DefaultMutableTreeNode)sel.getLastPathComponent()).getUserObject();
                if (!(o instanceof RootGroup)) {
                    JOptionPane.showMessageDialog(MainFrame.this,
                        "Please select a root to delete.", "Info",
                        JOptionPane.INFORMATION_MESSAGE);
                    return;
                }
                RootGroup rg = (RootGroup)o;
                int ans = JOptionPane.showConfirmDialog(
                    MainFrame.this,
                    "Delete root «" + rg.getName() + "» and all its children?",
                    "Confirm Delete", JOptionPane.YES_NO_OPTION);
                if (ans == JOptionPane.YES_OPTION) {
                    taskService.removeRoot(rg);
                    refreshTreeAll();
                }
            }
        });
        return m;
    }

    private JMenu createCategoryMenu() {
        JMenu m = new JMenu("Category");
        m.add(new AddCategoryAction(this, taskService));
        m.add(new EditCategoryAction(this, taskService));
        m.addSeparator();
        m.add(new AbstractAction("Delete Category") {
            public void actionPerformed(ActionEvent e) {
                TreePath sel = categoryTree.getSelectionPath();
                if (sel == null) return;
                Object o = ((DefaultMutableTreeNode)sel.getLastPathComponent()).getUserObject();
                if (!(o instanceof Category)) {
                    JOptionPane.showMessageDialog(MainFrame.this,
                        "Please select a category to delete.", "Info",
                        JOptionPane.INFORMATION_MESSAGE);
                    return;
                }
                Category cat = (Category)o;
                // parent root:
                DefaultMutableTreeNode pn = (DefaultMutableTreeNode)((DefaultMutableTreeNode)sel.getLastPathComponent()).getParent();
                RootGroup rg = (RootGroup)pn.getUserObject();

                int ans = JOptionPane.showConfirmDialog(
                    MainFrame.this,
                    "Delete category «" + cat.getName() + "» and all its tasks?",
                    "Confirm Delete", JOptionPane.YES_NO_OPTION);
                if (ans == JOptionPane.YES_OPTION) {
                    taskService.removeCategory(rg, cat);
                    refreshAfterChange(null);
                }
            }
        });
        return m;
    }

    private JMenu createTaskMenu() {
        JMenu m = new JMenu("Task");
        m.add(new AddTaskAction(this, taskService));
        m.add(new EditTaskAction(this, taskService));
        m.addSeparator();
        m.add(new AbstractAction("Delete Task") {
            public void actionPerformed(ActionEvent e) {
                TreePath sel = categoryTree.getSelectionPath();
                if (sel == null) return;
                Object o = ((DefaultMutableTreeNode)sel.getLastPathComponent()).getUserObject();
                if (!(o instanceof Task)) {
                    JOptionPane.showMessageDialog(MainFrame.this,
                        "Please select a task to delete.", "Info",
                        JOptionPane.INFORMATION_MESSAGE);
                    return;
                }
                Task t = (Task)o;
                DefaultMutableTreeNode cn = (DefaultMutableTreeNode)((DefaultMutableTreeNode)sel.getLastPathComponent()).getParent();
                Category cat = (Category)cn.getUserObject();

                int ans = JOptionPane.showConfirmDialog(
                    MainFrame.this,
                    "Delete task «" + t.getTitle() + "»?",
                    "Confirm Delete", JOptionPane.YES_NO_OPTION);
                if (ans == JOptionPane.YES_OPTION) {
                    taskService.removeTask(cat, t);
                    refreshAfterChange(cat);
                }
            }
        });
        m.addSeparator();
        m.add(new ToggleCompletedAction(this, taskService));
        m.add(new ResetOrderAction(taskTableModel, masterTasks));
        return m;
    }

    // — Helpers —
    private void applyFilter() {
        String txt = filterField.getText().trim().toLowerCase();
        if (txt.isEmpty()) {
            refreshTreeAll();
        } else {
            showTasks(getAllTasks().stream()
                .filter(t->
                    t.getTitle().toLowerCase().contains(txt)
                 || t.getDescription().toLowerCase().contains(txt))
                .toList());
        }
    }
    private void showTasks(List<Task> tasks) {
        taskTableModel.setTasks(tasks);
    }
    private List<Task> getAllTasks() {
        return taskService.getAllRoots().stream()
            .flatMap(r -> r.getCategories().stream())
            .flatMap(c -> c.getTasks().stream())
            .toList();
    }
    private List<Task> getTasksFromRoot(RootGroup r) {
        return r.getCategories().stream()
            .flatMap(c -> c.getTasks().stream())
            .toList();
    }
    public void expandAll() {
        SwingUtilities.invokeLater(() -> {
            for (int i = 0; i < categoryTree.getRowCount(); i++)
                categoryTree.expandRow(i);
        });
    }
}
