package com.taskflow.app;

import com.taskflow.model.RootGroup;
import com.taskflow.persistence.RootGroupPersistence;
import com.taskflow.persistence.XmlSaxHandler;
import com.taskflow.service.DefaultTaskService;
import com.taskflow.service.TaskService;
import com.taskflow.ui.MainFrame;
import com.taskflow.util.PropertiesManager;

import javax.swing.*;
import java.io.File;
import java.util.Collections;
import java.util.List;

/**
 * Punctul de intrare în aplicația TaskFlow.
 * Încarcă Look & Feel și calea fișierului de date din config.properties,
 * Inițializează serviciul și interfața grafică.
 */
public class TaskFlowApp {
    public static void main(String[] args) {
        // 1) Setăm Look and Feel-ul din config
    	try {
    	    String lf = PropertiesManager.get("ui.lookAndFeel");
    	    UIManager.setLookAndFeel(lf);
    	} catch(Exception ignored){}

        // 2) Creăm și inițializăm serviciul de task-uri
        TaskService taskService = new DefaultTaskService();

        // 3) Obține calea către fișierul de date din config.properties (implicit data.xml)
        String dataFilePath = PropertiesManager.get("data.file", "data.xml");
        File dataFile = new File(dataFilePath);

        // 4) Încarcă root-urile din fișierul XML cu SAX, dacă există
        List<RootGroup> roots;
        if (dataFile.exists()) {
            try {
                RootGroupPersistence loader = new XmlSaxHandler();
                roots = loader.loadRootGroups(dataFile);
            } catch (Exception ex) {
                System.err.println("Eroare la încărcarea root-urilor: " + ex.getMessage());
                roots = Collections.emptyList();
            }
        } else {
            roots = Collections.emptyList(); // fișier inexistent
        }

        // 5) Adaugă root-urile încărcate în serviciu
        for (RootGroup rg : roots) {
            taskService.addRoot(rg);
        }

        // 6) Deschide interfața grafică în Event Dispatch Thread
        SwingUtilities.invokeLater(() -> {
            MainFrame frame = new MainFrame(taskService);

            // Dacă am încărcat un fișier existent, reține-l ca currentFile și lastDir
            if (dataFile.exists()) {
                frame.setCurrentFile(dataFile);
                frame.setLastDir(dataFile.getParentFile());
                frame.refreshTreeAll();
            }

            frame.setVisible(true);
        });
    }
}