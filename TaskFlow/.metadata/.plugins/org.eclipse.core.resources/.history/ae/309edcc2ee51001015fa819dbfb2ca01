package com.taskflow.persistence;

import com.taskflow.model.Category;
import com.taskflow.model.Task;
import org.xml.sax.Attributes;
import org.xml.sax.SAXException;
import org.xml.sax.helpers.DefaultHandler;

import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;
import java.io.File;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

/**
 * Handler for importing data using SAX.
 */
public class XmlSaxHandler extends DefaultHandler {
    private List<Category> categories = new ArrayList<>();
    private Category currentCategory;
    private Task currentTask;
    private StringBuilder content = new StringBuilder();

    /**
     * Parses the given XML file and returns the list of categories.
     */
    public List<Category> loadCategories(File file) throws Exception {
        SAXParser parser = SAXParserFactory.newInstance().newSAXParser();
        parser.parse(file, this);
        return categories;
    }

    @Override
    public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException {
        content.setLength(0);
        switch (qName) {
            case "category":
                currentCategory = new Category();
                // setId prime»ôte String direct
                currentCategory.setId(UUID.fromString(attributes.getValue("id")));

                currentCategory.setName(attributes.getValue("name"));
                currentCategory.setColor(attributes.getValue("color"));
                break;
            case "task":
                currentTask = new Task();
                currentTask.setId(attributes.getValue("id"));
                currentTask.setTitle(attributes.getValue("title"));
                currentTask.setCompleted(Boolean.parseBoolean(attributes.getValue("completed")));
                break;
        }
    }

    @Override
    public void endElement(String uri, String localName, String qName) throws SAXException {
        switch (qName) {
            case "category":
                categories.add(currentCategory);
                currentCategory = null;
                break;
            case "task":
                if (currentCategory != null) {
                    currentCategory.addTask(currentTask);
                }
                currentTask = null;
                break;
            case "description":
                if (currentTask != null) {
                    currentTask.setDescription(content.toString());
                }
                break;
            case "dueDate":
                if (currentTask != null) {
                    String[] parts = content.toString().split("-");
                    Calendar cal = Calendar.getInstance();
                    cal.set(
                        Integer.parseInt(parts[0]),
                        Integer.parseInt(parts[1]) - 1,
                        Integer.parseInt(parts[2])
                    );
                    currentTask.setDueDate(cal);
                }
                break;
        }
    }

    @Override
    public void characters(char[] ch, int start, int length) throws SAXException {
        content.append(ch, start, length);
    }
}
