package com.taskflow.persistence;

import com.taskflow.model.Category;
import com.taskflow.model.Task;
import org.w3c.dom.Document;
import org.w3c.dom.Element;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import java.io.File;
import java.util.Calendar;
import java.util.List;

/** Handler DOM care implementează CategoryPersistence */
public class XmlDomHandler implements CategoryPersistence {
    @Override
    public List<Category> load(File file) {
        throw new UnsupportedOperationException("DOM handler nu suportă load");
    }

    @Override
    public void save(List<Category> categories, File file) throws Exception {
        DocumentBuilderFactory f = DocumentBuilderFactory.newInstance();
        DocumentBuilder b = f.newDocumentBuilder();
        Document doc = b.newDocument();

        Element root = doc.createElement("categories");
        doc.appendChild(root);

        for (Category cat : categories) {
            Element c = doc.createElement("category");
            c.setAttribute("id",    cat.getId());
            c.setAttribute("name",  cat.getName());
            c.setAttribute("color", cat.getColor());

            for (Task t : cat.getTasks()) {
                Element tEl = doc.createElement("task");
                tEl.setAttribute("id",        t.getId());
                tEl.setAttribute("title",     t.getTitle());
                tEl.setAttribute("completed", Boolean.toString(t.isCompleted()));

                Element d = doc.createElement("description");
                d.setTextContent(t.getDescription());
                tEl.appendChild(d);

                Element due = doc.createElement("dueDate");
                Calendar cal = t.getDueDate();
                due.setTextContent(String.format(
                    "%04d-%02d-%02d",
                    cal.get(Calendar.YEAR),
                    cal.get(Calendar.MONTH)+1,
                    cal.get(Calendar.DAY_OF_MONTH)
                ));
                tEl.appendChild(due);

                c.appendChild(tEl);
            }
            root.appendChild(c);
        }

        TransformerFactory tf = TransformerFactory.newInstance();
        Transformer tr = tf.newTransformer();
        tr.setOutputProperty(OutputKeys.INDENT, "yes");
        tr.setOutputProperty("{http://xml.apache.org/xslt}indent-amount", "2");

        tr.transform(new DOMSource(doc), new StreamResult(file));
    }
}
