package com.taskflow.action;

import com.taskflow.model.Category;
import com.taskflow.model.Task;
import com.taskflow.ui.MainFrame;

import javax.swing.*;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreePath;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.ActionEvent;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;

public class TaskDialogAction extends AbstractAction {
    private final MainFrame frame;
    private final boolean isNew;

    public TaskDialogAction(MainFrame frame, boolean isNew) {
        super(isNew ? "Add Task" : "Edit Task");
        this.frame = frame;
        this.isNew = isNew;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        // --- determină Task și Category ---
        Category cat;
        Task    task = null;

        TreePath sel = frame.getCategoryTree().getSelectionPath();
        if (sel == null) {
            JOptionPane.showMessageDialog(frame, "Please select a category or task first.");
            return;
        }

        DefaultMutableTreeNode node = (DefaultMutableTreeNode) sel.getLastPathComponent();
        Object obj = node.getUserObject();

        if (isNew) {
            // Add: trebuie o categorie selectată
            if (!(obj instanceof Category)) {
                JOptionPane.showMessageDialog(frame, "Please select a category to add into.");
                return;
            }
            cat = (Category) obj;
        } else {
            // Edit: trebuie un task selectat
            if (!(obj instanceof Task)) {
                JOptionPane.showMessageDialog(frame, "Please select a task to edit.");
                return;
            }
            task = (Task) obj;
            // categoria este părinte direct al nodului task
            DefaultMutableTreeNode parent = (DefaultMutableTreeNode) node.getParent();
            cat = (Category) parent.getUserObject();
        }

        // --- date inițiale ---
        String initTitle = (task == null ? "" : task.getTitle());
        String initDesc  = (task == null ? "" : task.getDescription());
        String initDate  = "";
        if (task != null) {
            initDate = new SimpleDateFormat("yyyy-MM-dd")
                           .format(task.getDueDate().getTime());
        }
        Color initColor = (task == null)
            ? Color.RED
            : Color.decode(task.getColorHex());

        // --- componente de dialog ---
        JTextArea titleField = new JTextArea(initTitle, 1, 20);
        titleField.setLineWrap(true);            // fără wrap automat
        titleField.setWrapStyleWord(false);
        JScrollPane titleScroll = new JScrollPane(titleField,
            JScrollPane.VERTICAL_SCROLLBAR_NEVER,
            JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        
        JTextArea descField = new JTextArea(initTitle, 1, 20);
        titleField.setLineWrap(true);            // fără wrap automat
        titleField.setWrapStyleWord(false);
        JScrollPane descScroll = new JScrollPane(titleField,
            JScrollPane.VERTICAL_SCROLLBAR_NEVER,
            JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        
        JTextArea dateField = new JTextArea(initTitle, 1, 20);
        titleField.setLineWrap(true);            // fără wrap automat
        titleField.setWrapStyleWord(false);
        JScrollPane dateScroll = new JScrollPane(titleField,
            JScrollPane.VERTICAL_SCROLLBAR_NEVER,
            JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        
        JLabel colorSwatch = new JLabel();
        int w = 24, h = 24;
        colorSwatch.setPreferredSize(new Dimension(w, h));
        colorSwatch.setOpaque(true);
        colorSwatch.setBorder(BorderFactory.createLineBorder(Color.DARK_GRAY));
        colorSwatch.setBackground(initColor);
        colorSwatch.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        colorSwatch.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent me) {
                Color c = JColorChooser.showDialog(
                    frame, "Choose color", colorSwatch.getBackground());
                if (c != null) colorSwatch.setBackground(c);
            }
        });

        // --- aranjare pe GridBag ---
        JPanel panel = new JPanel(new GridBagLayout());
        GridBagConstraints gc = new GridBagConstraints();
        gc.insets = new Insets(4,4,4,4);
        gc.anchor = GridBagConstraints.WEST;

        gc.gridx=0; gc.gridy=0; panel.add(new JLabel("Title:"), gc);
        gc.gridx=1;            panel.add(titleField, gc);

        gc.gridx=0; gc.gridy=1; panel.add(new JLabel("Description:"), gc);
        gc.gridx=1;            panel.add(descField, gc);

        gc.gridx=0; gc.gridy=2; panel.add(new JLabel("Due date (yyyy-MM-dd or yyyyMMdd):"), gc);
        gc.gridx=1;            panel.add(dateField, gc);

        gc.gridx=0; gc.gridy=3; panel.add(new JLabel("Color:"), gc);
        gc.gridx=1;            panel.add(colorSwatch, gc);

        // --- afișează dialog ---
        int ans = JOptionPane.showConfirmDialog(
            frame, panel,
            isNew ? "Add Task" : "Edit Task",
            JOptionPane.OK_CANCEL_OPTION,
            JOptionPane.PLAIN_MESSAGE
        );
        if (ans != JOptionPane.OK_OPTION) return;

        // --- preia și validează valori ---
        String title = titleField.getText().trim();
        String desc  = descField.getText().trim();
        String dateInput = dateField.getText().trim();

        Calendar due;
        try {
            Date d;
            if (dateInput.contains("-")) {
                d = new SimpleDateFormat("yyyy-MM-dd").parse(dateInput);
            } else {
                d = new SimpleDateFormat("yyyyMMdd").parse(dateInput);
            }
            due = Calendar.getInstance();
            due.setTime(d);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(frame,
                "Invalid date format. Use yyyy-MM-dd or yyyyMMdd.");
            return;
        }

        String hex = String.format("#%02x%02x%02x",
            colorSwatch.getBackground().getRed(),
            colorSwatch.getBackground().getGreen(),
            colorSwatch.getBackground().getBlue()
        );

        // --- adaugă sau actualizează ---
        if (isNew) {
            Task t = new Task(title, desc, due, false, hex);
            frame.getTaskService().addTask(cat, t);
        } else {
            task.setTitle(title);
            task.setDescription(desc);
            task.setDueDate(due);
            task.setColorHex(hex);
            frame.getTaskService().updateTask(task);
        }
        frame.refreshAfterChange(cat);
    }
}
