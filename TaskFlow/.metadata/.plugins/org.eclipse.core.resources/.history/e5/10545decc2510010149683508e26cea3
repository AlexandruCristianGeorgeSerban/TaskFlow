package com.taskflow.ui;

import com.taskflow.model.Category;
import com.taskflow.model.Task;
import com.taskflow.persistence.XmlDomHandler;
import com.taskflow.persistence.XmlSaxHandler;

import javax.swing.*;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.TableRowSorter;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreePath;
import java.awt.*;
import java.awt.event.*;
import java.io.File;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.stream.Collectors;

/**
 * Main application window.
 */
@SuppressWarnings("serial")
public class MainFrame extends JFrame {
    private final List<Category> allCategories;
    private TaskTableModel taskTableModel;
    private CategoryTreeModel categoryTreeModel;
    private JTable taskTable;
    private JTree categoryTree;
    private JTextField filterField;

    public MainFrame(List<Category> categories) {
        super("TaskFlow");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(800, 600);
        setLocationRelativeTo(null);

        this.allCategories = new ArrayList<>(categories);

        // Models
        taskTableModel = new TaskTableModel(getAllTasks(allCategories));
        categoryTree.setCellRenderer(new ColorTreeCellRenderer());

        // Components
        taskTable = new JTable(taskTableModel);
        TableRowSorter<TaskTableModel> sorter = new TableRowSorter<>(taskTableModel);
        taskTable.setRowSorter(sorter);

        categoryTree = new JTree(categoryTreeModel);
        filterField = new JTextField(15);

        // Layout
        JSplitPane splitPane = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT,
                new JScrollPane(categoryTree), new JScrollPane(taskTable));
        splitPane.setDividerLocation(200);

        JPanel topPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        topPanel.add(new JLabel("Filter:"));
        topPanel.add(filterField);

        add(topPanel, BorderLayout.NORTH);
        add(splitPane, BorderLayout.CENTER);

        // Menus
        JMenuBar menuBar = new JMenuBar();
        menuBar.add(createFileMenu());
        menuBar.add(createCategoryMenu());
        menuBar.add(createTaskMenu());
        setJMenuBar(menuBar);

        // Filter listener
        filterField.getDocument().addDocumentListener(new DocumentListener() {
            @Override public void insertUpdate(DocumentEvent e) { applyFilter(); }
            @Override public void removeUpdate(DocumentEvent e) { applyFilter(); }
            @Override public void changedUpdate(DocumentEvent e) { applyFilter(); }
        });

        // Double-click listener on tree
        categoryTree.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() == 2) {
                    TreePath path = categoryTree.getPathForLocation(e.getX(), e.getY());
                    if (path != null) {
                        Object node = ((DefaultMutableTreeNode) path.getLastPathComponent()).getUserObject();
                        if (node instanceof Category) {
                            showTasks(((Category) node).getTasks());
                        } else if (node instanceof Task) {
                            showTasks(List.of((Task) node));
                        } else {
                            showTasks(getAllTasks(allCategories));
                        }
                    }
                }
            }
        });
    }

    private JMenu createFileMenu() {
        JMenu fileMenu = new JMenu("File");
        fileMenu.add(new AbstractAction("Import XML") {
            @Override public void actionPerformed(ActionEvent e) {
                JFileChooser chooser = new JFileChooser();
                if (chooser.showOpenDialog(MainFrame.this) == JFileChooser.APPROVE_OPTION) {
                    File file = chooser.getSelectedFile();
                    try {
                        List<Category> cats = new XmlSaxHandler().loadCategories(file);
                        allCategories.clear();
                        allCategories.addAll(cats);
                        refreshData(cats);
                    } catch (Exception ex) {
                        showError(ex);
                    }
                }
            }
        });
        fileMenu.add(new AbstractAction("Export XML") {
            @Override public void actionPerformed(ActionEvent e) {
                JFileChooser chooser = new JFileChooser();
                if (chooser.showSaveDialog(MainFrame.this) == JFileChooser.APPROVE_OPTION) {
                    File file = chooser.getSelectedFile();
                    try {
                        XmlDomHandler.saveCategories(allCategories, file);
                    } catch (Exception ex) {
                        showError(ex);
                    }
                }
            }
        });
        return fileMenu;
    }

    private JMenu createCategoryMenu() {
        JMenu categoryMenu = new JMenu("Category");
        categoryMenu.add(new AbstractAction("Add Category") {
            @Override public void actionPerformed(ActionEvent e) {
                addCategoryDialog();
            }
        });
        return categoryMenu;
    }

    private JMenu createTaskMenu() {
        JMenu taskMenu = new JMenu("Task");
        taskMenu.add(new AbstractAction("Add Task") {
            @Override public void actionPerformed(ActionEvent e) {
                addTaskDialog();
            }
        });
        return taskMenu;
    }

    private void applyFilter() {
        String text = filterField.getText().trim().toLowerCase();
        if (text.isEmpty()) {
            showTasks(getAllTasks(allCategories));
            categoryTreeModel.updateCategories(allCategories);
        } else {
            List<Task> filteredTasks = getAllTasks(allCategories).stream()
                    .filter(t -> t.getTitle().toLowerCase().contains(text)
                            || t.getDescription().toLowerCase().contains(text))
                    .collect(Collectors.toList());
            showTasks(filteredTasks);

            List<Category> catFiltered = new ArrayList<>();
            for (Category c : allCategories) {
                if (c.getName().toLowerCase().contains(text)) {
                    catFiltered.add(c);
                } else {
                    List<Task> matches = c.getTasks().stream()
                            .filter(t -> t.getTitle().toLowerCase().contains(text)
                                    || t.getDescription().toLowerCase().contains(text))
                            .toList();
                    if (!matches.isEmpty()) {
                        Category copy = new Category(c.getName(), c.getColor());
                        copy.setId(c.getId());
                        copy.setTasks(matches);
                        catFiltered.add(copy);
                    }
                }
            }
            categoryTreeModel.updateCategories(catFiltered);
        }
    }

    private void showTasks(List<Task> tasks) {
        taskTableModel.setTasks(tasks);
    }

    private List<Task> getAllTasks(List<Category> categories) {
        return categories.stream()
                .flatMap(c -> c.getTasks().stream())
                .toList();
    }

    private void addCategoryDialog() {
        String name = JOptionPane.showInputDialog(this, "Category name:");
        if (name == null || name.trim().isEmpty()) return;
        String color = JOptionPane.showInputDialog(this, "Category color (hex, e.g. #FF6347):");
        Category cat = new Category(name.trim(), color != null ? color.trim() : "");
        allCategories.add(cat);
        refreshData(allCategories);
    }

    private void addTaskDialog() {
        TreePath sel = categoryTree.getSelectionPath();
        if (sel == null) {
            JOptionPane.showMessageDialog(this, "Select a category to add a task.", "Info", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        Object obj = ((DefaultMutableTreeNode) sel.getLastPathComponent()).getUserObject();
        if (!(obj instanceof Category)) {
            JOptionPane.showMessageDialog(this, "Please select a category node.", "Info", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        Category cat = (Category) obj;
        String title = JOptionPane.showInputDialog(this, "Task title:");
        if (title == null || title.trim().isEmpty()) return;
        String desc = JOptionPane.showInputDialog(this, "Task description:");
        String due = JOptionPane.showInputDialog(this, "Due date (yyyy-MM-dd):");
        Calendar dueDate;
        try {
            Date d = new SimpleDateFormat("yyyy-MM-dd").parse(due);
            dueDate = Calendar.getInstance(); dueDate.setTime(d);
        } catch (ParseException ex) {
            JOptionPane.showMessageDialog(this, "Invalid date format.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        Task t = new Task(title, desc, dueDate, false);
        cat.addTask(t);
        refreshData(allCategories);
    }

    private void refreshData(List<Category> categories) {
        categoryTreeModel.updateCategories(categories);
        showTasks(getAllTasks(categories));
    }

    private void showError(Exception ex) {
        JOptionPane.showMessageDialog(this,
                ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
}
