package com.taskflow.action;

import com.taskflow.model.Category;
import com.taskflow.model.Task;
import com.taskflow.ui.MainFrame;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;

public class TaskDialogAction extends AbstractAction {
    private static final long serialVersionUID = 1L;
    private final MainFrame frame;
    private final boolean isNew;

    public TaskDialogAction(MainFrame frame, boolean isNew) {
        super(isNew ? "Add Task" : "Edit Task");
        this.frame = frame;
        this.isNew = isNew;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        // 1) Determinăm categoria țintă
        Category cat = frame.getSelectedCategory();
        Task task = null;
        if (!isNew) {
            task = frame.getSelectedTask();
            if (task != null && cat == null) {
                // găsim categoria din serviciu
                for (Category c : frame.getTaskService().getAllRoots().stream()
                        .flatMap(r -> r.getCategories().stream()).toList()) {
                    if (c.getTasks().contains(task)) { cat = c; break; }
                }
            }
        }
        if (cat == null) {
            JOptionPane.showMessageDialog(frame,
                isNew ? "Select a category first to add a task."
                      : "Select a task (or its category) first to edit.",
                "Info", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        // 2) Valorile inițiale
        String initTitle = task == null ? "" : task.getTitle();
        String initDesc  = task == null ? "" : task.getDescription();
        String initDate  = "";
        Color  initColor = Color.RED;
        if (task != null) {
            initDate  = new SimpleDateFormat("yyyy-MM-dd").format(task.getDueDate().getTime());
            initColor = Color.decode(task.getColorHex());
        }

        // 3) Construim câmpurile cu scroll orizontal
        JTextArea titleField = new JTextArea(initTitle, 1, 30);
        titleField.setLineWrap(false);
        JScrollPane titleScroll = new JScrollPane(titleField,
            JScrollPane.VERTICAL_SCROLLBAR_NEVER,
            JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        titleScroll.setPreferredSize(new Dimension(300, 40));

        JTextArea descField = new JTextArea(initDesc, 4, 30);
        descField.setLineWrap(false);
        JScrollPane descScroll = new JScrollPane(descField,
            JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,
            JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        descScroll.setPreferredSize(new Dimension(300, 40));

        JTextArea dateField = new JTextArea(initDate, 1, 15);
        dateField.setLineWrap(false);
        JScrollPane dateScroll = new JScrollPane(dateField,
            JScrollPane.VERTICAL_SCROLLBAR_NEVER,
            JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        dateScroll.setPreferredSize(new Dimension(300, 40));

        // 4) Color swatch mai lat
        JLabel colorSwatch = new JLabel();
        colorSwatch.setOpaque(true);
        colorSwatch.setBackground(initColor);
        colorSwatch.setBorder(BorderFactory.createLineBorder(Color.DARK_GRAY));
        colorSwatch.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        colorSwatch.setPreferredSize(new Dimension(300, 24));
        colorSwatch.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent me) {
                Color c = JColorChooser.showDialog(
                    frame, "Choose task color", colorSwatch.getBackground());
                if (c != null) colorSwatch.setBackground(c);
            }
        });

        // 5) Panelul de dialog
        JPanel panel = new JPanel(new GridBagLayout());
        GridBagConstraints gc = new GridBagConstraints();
        gc.insets = new Insets(4,4,4,4);
        gc.anchor = GridBagConstraints.WEST;

        gc.gridx=0; gc.gridy=0; panel.add(new JLabel("Title:"), gc);
        gc.gridx=1;            panel.add(titleScroll, gc);

        gc.gridx=0; gc.gridy=1; panel.add(new JLabel("Description:"), gc);
        gc.gridx=1;            panel.add(descScroll, gc);

        gc.gridx=0; gc.gridy=2; panel.add(new JLabel("Due Date (yyyy-MM-dd or yyyyMMdd):"), gc);
        gc.gridx=1;            panel.add(dateScroll, gc);

        gc.gridx=0; gc.gridy=3; panel.add(new JLabel("Color:"), gc);
        gc.gridx=1;            panel.add(colorSwatch, gc);

        int ans = JOptionPane.showConfirmDialog(
            frame, panel,
            isNew ? "Add Task" : "Edit Task",
            JOptionPane.OK_CANCEL_OPTION,
            JOptionPane.PLAIN_MESSAGE
        );
        if (ans != JOptionPane.OK_OPTION) return;

        // 6) Citim și validăm
        String title = titleField.getText().trim();
        String desc  = descField.getText().trim();
        String in    = dateField.getText().trim();
        Calendar due = Calendar.getInstance();
        try {
            Date d;
            if (in.contains("-")) {
                d = new SimpleDateFormat("yyyy-MM-dd").parse(in);
            } else {
                d = new SimpleDateFormat("yyyyMMdd").parse(in);
            }
            due.setTime(d);
        } catch (ParseException ex) {
            JOptionPane.showMessageDialog(frame,
                "Invalid date. Use yyyy-MM-dd or yyyyMMdd",
                "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String hex = String.format("#%02x%02x%02x",
            colorSwatch.getBackground().getRed(),
            colorSwatch.getBackground().getGreen(),
            colorSwatch.getBackground().getBlue()
        );

        // 7) Aplicăm Add sau Edit
        if (isNew) {
            Task t = new Task(title, desc, due, false, hex);
            frame.getTaskService().addTask(cat, t);
        } else {
            task.setTitle(title);
            task.setDescription(desc);
            task.setDueDate(due);
            task.setColorHex(hex);
            frame.getTaskService().updateTask(task);
        }
        frame.refreshAfterChange(cat);
    }
}
