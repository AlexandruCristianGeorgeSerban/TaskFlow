package com.taskflow.ui;

import com.taskflow.action.AddCategoryAction;
import com.taskflow.action.AddRootAction;
import com.taskflow.action.AddTaskAction;
import com.taskflow.action.DeleteFileAction;
import com.taskflow.action.EditCategoryAction;
import com.taskflow.action.EditRootAction;
import com.taskflow.action.EditTaskAction;
import com.taskflow.action.ExportAction;
import com.taskflow.action.ImportAction;
import com.taskflow.action.ResetOrderAction;
import com.taskflow.action.ToggleCompletedAction;
import com.taskflow.model.Category;
import com.taskflow.model.RootGroup;
import com.taskflow.model.Task;
import com.taskflow.service.TaskService;

import javax.swing.*;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.TableRowSorter;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreePath;
import java.awt.*;
import java.util.List;

/**
 * Main application window.
 */
@SuppressWarnings("serial")
public class MainFrame extends JFrame {
    private final TaskService taskService;
    private final TaskTableModel taskTableModel;
    private final CategoryTreeModel categoryTreeModel;
    private final JTable taskTable;
    private final JTree categoryTree;
    private final JTextField filterField;
    private List<Task> masterTasks;

    public MainFrame(TaskService service) {
        super("TaskFlow");
        this.taskService = service;

        // Models
        taskTableModel = new TaskTableModel(getAllTasks());
        masterTasks     = List.copyOf(getAllTasks());
        categoryTreeModel = new CategoryTreeModel(taskService.getAllRoots());

        // Components
        taskTable = new JTable(taskTableModel);
        taskTable.getTableHeader().setReorderingAllowed(true);
        taskTable.setRowSorter(new TableRowSorter<>(taskTableModel));

        categoryTree = new JTree(categoryTreeModel);
        categoryTree.setRootVisible(false);
        categoryTree.setShowsRootHandles(true);
        categoryTree.setCellRenderer(new ColorTreeCellRenderer());

        filterField = new JTextField(15);

        // Layout
        JSplitPane splitPane = new JSplitPane(
            JSplitPane.HORIZONTAL_SPLIT,
            new JScrollPane(categoryTree),
            new JScrollPane(taskTable)
        );
        splitPane.setDividerLocation(200);

        JPanel topPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        topPanel.add(new JLabel("Filter:"));
        topPanel.add(filterField);

        add(topPanel, BorderLayout.NORTH);
        add(splitPane, BorderLayout.CENTER);

        // Menus
        JMenuBar menuBar = new JMenuBar();
        menuBar.add(createFileMenu());
        menuBar.add(createRootMenu());
        menuBar.add(createCategoryMenu());
        menuBar.add(createTaskMenu());
        setJMenuBar(menuBar);

        // Filter listener
        filterField.getDocument().addDocumentListener(new DocumentListener() {
            public void insertUpdate(DocumentEvent e) { applyFilter(); }
            public void removeUpdate(DocumentEvent e) { applyFilter(); }
            public void changedUpdate(DocumentEvent e) { applyFilter(); }
        });

        // Tree selection: show root/category tasks on single click
        categoryTree.addTreeSelectionListener(e -> {
            TreePath path = e.getNewLeadSelectionPath();
            if (path == null) return;
            Object obj = ((DefaultMutableTreeNode)path.getLastPathComponent()).getUserObject();
            if (obj instanceof RootGroup) {
                showTasks(getTasksFromRoot((RootGroup) obj));
            } else if (obj instanceof Category) {
                showTasks(((Category)obj).getTasks());
            }
        });

        // Double-click on Task: show only that one
        categoryTree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent e) {
                if (e.getClickCount() == 2) {
                    TreePath p = categoryTree.getPathForLocation(e.getX(), e.getY());
                    if (p != null) {
                        Object obj = ((DefaultMutableTreeNode)p.getLastPathComponent()).getUserObject();
                        if (obj instanceof Task) {
                            showTasks(List.of((Task)obj));
                        }
                    }
                }
            }
        });

        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setSize(800, 600);
        setLocationRelativeTo(null);
    }

    private JMenu createFileMenu() {
        JMenu m = new JMenu("File");
        m.add(new ImportAction(this, taskService));
        m.add(new ExportAction(this, taskService));
        m.addSeparator();
        m.add(new DeleteFileAction(this));
        return m;
    }

    private JMenu createRootMenu() {
        JMenu m = new JMenu("Root");
        m.add(new AddRootAction(this, taskService));
        m.add(new EditRootAction(this, taskService));
        return m;
    }

    private JMenu createCategoryMenu() {
        JMenu m = new JMenu("Category");
        m.add(new AddCategoryAction(this, taskService));
        m.add(new EditCategoryAction(this, taskService));
        return m;
    }

    private JMenu createTaskMenu() {
        JMenu m = new JMenu("Task");
        m.add(new AddTaskAction(this, taskService));
        m.add(new EditTaskAction(this, taskService));
        m.addSeparator();
        m.add(new ToggleCompletedAction(this, taskService));
        m.addSeparator();
        m.add(new ResetOrderAction(taskTableModel, masterTasks));
        return m;
    }

    // Helper: apply text filter to table and tree
    private void applyFilter() {
        String txt = filterField.getText().trim().toLowerCase();
        if (txt.isEmpty()) {
            showTasks(getAllTasks());
            refreshTree();
        } else {
            taskTableModel.setTasks(
                getAllTasks().stream()
                    .filter(t -> t.getTitle().toLowerCase().contains(txt)
                              || t.getDescription().toLowerCase().contains(txt))
                    .toList()
            );
            // (tree filtering omitted)
        }
    }

    // Data accessors used by Actions
    public Category getSelectedCategory() {
        TreePath sel = categoryTree.getSelectionPath();
        if (sel == null) return null;
        Object obj = ((DefaultMutableTreeNode)sel.getLastPathComponent()).getUserObject();
        return obj instanceof Category ? (Category)obj : null;
    }

    public Task getSelectedTask() {
        TreePath sel = categoryTree.getSelectionPath();
        if (sel == null) return null;
        Object obj = ((DefaultMutableTreeNode)sel.getLastPathComponent()).getUserObject();
        return obj instanceof Task ? (Task)obj : null;
    }

    // Called by Actions after modifying data
    public void refreshAfterChange(Category cat) {
        categoryTreeModel.updateRoots(taskService.getAllRoots());
        showTasks(getTasksFromCategory(cat));
    }

    private List<Task> getAllTasks() {
        return taskService.getAllRoots().stream()
            .flatMap(rg -> rg.getCategories().stream())
            .flatMap(c  -> c.getTasks().stream())
            .toList();
    }

    private List<Task> getTasksFromRoot(RootGroup rg) {
        return rg.getCategories().stream()
                 .flatMap(c -> c.getTasks().stream())
                 .toList();
    }

    private List<Task> getTasksFromCategory(Category cat) {
        return List.copyOf(cat.getTasks());
    }

    private void showTasks(List<Task> tasks) {
        taskTableModel.setTasks(tasks);
    }

    private void refreshTree() {
        categoryTreeModel.updateRoots(taskService.getAllRoots());
        SwingUtilities.invokeLater(() -> {
            for (int i = 0; i < categoryTree.getRowCount(); i++) {
                categoryTree.expandRow(i);
            }
        });
    }
}
