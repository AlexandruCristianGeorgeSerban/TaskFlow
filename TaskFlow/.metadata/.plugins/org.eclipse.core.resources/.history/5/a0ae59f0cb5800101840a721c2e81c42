package com.taskflow.ui;

import com.taskflow.model.Category;
import com.taskflow.model.RootGroup;
import com.taskflow.model.Task;
import com.taskflow.service.TaskService;
import com.taskflow.action.*;

import javax.swing.*;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.TableRowSorter;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreePath;
import java.awt.*;
import java.awt.event.*;
import java.io.File;
import java.util.List;

public class MainFrame extends JFrame {
    private static final long serialVersionUID = 1L;

    private final TaskService taskService;
    private final TaskTableModel taskTableModel;
    private final CategoryTreeModel categoryTreeModel;
    private final JTable taskTable;
    private final JTree categoryTree;
    private final JTextField filterField;
    private final List<Task> masterTasks;

    public MainFrame(TaskService service) {
        super("TaskFlow");
        this.taskService       = service;
        this.taskTableModel    = new TaskTableModel(getAllTasks());
        this.masterTasks       = List.copyOf(getAllTasks());
        this.categoryTreeModel = new CategoryTreeModel(taskService.getAllRoots());

        // init components
        taskTable = new JTable(taskTableModel);
        taskTable.setRowSorter(new TableRowSorter<>(taskTableModel));

        categoryTree = new JTree(categoryTreeModel);
        categoryTree.setRootVisible(false);
        categoryTree.setShowsRootHandles(true);
        categoryTree.setCellRenderer(new ColorTreeCellRenderer());

        filterField = new JTextField(15);

        // drag & drop on tree
        categoryTree.setDragEnabled(true);
        categoryTree.setDropMode(DropMode.ON);
        categoryTree.setTransferHandler(new TreeTransferHandler(this, taskService));

        // context menu on tree
        categoryTree.addMouseListener(new MouseAdapter() {
            public void mousePressed(MouseEvent e) { showPopup(e); }
            public void mouseReleased(MouseEvent e) { showPopup(e); }

            private void showPopup(MouseEvent e) {
                if (!e.isPopupTrigger()) return;
                int x = e.getX(), y = e.getY();
                TreePath path = categoryTree.getPathForLocation(x, y);
                if (path != null) categoryTree.setSelectionPath(path);

                Object nodeObj = null;
                if (path != null) {
                    DefaultMutableTreeNode node = (DefaultMutableTreeNode) path.getLastPathComponent();
                    nodeObj = node.getUserObject();
                }

                JPopupMenu popup = new JPopupMenu();

                if (nodeObj == null) {
                    popup.add(new JMenuItem(new AddRootAction(MainFrame.this)));
                } else if (nodeObj instanceof RootGroup) {
                    popup.add(new JMenuItem(new AddCategoryAction(MainFrame.this)));
                    popup.addSeparator();
                    popup.add(new JMenuItem(new EditRootAction(MainFrame.this)));
                    popup.add(new JMenuItem(new DeleteRootAction(MainFrame.this, taskService)));
                } else if (nodeObj instanceof Category) {
                    popup.add(new JMenuItem(new AddTaskAction(MainFrame.this)));
                    popup.addSeparator();
                    popup.add(new JMenuItem(new EditCategoryAction(MainFrame.this)));
                    popup.add(new JMenuItem(new DeleteCategoryAction(MainFrame.this, taskService)));
                } else if (nodeObj instanceof Task) {
                    popup.add(new JMenuItem(new EditTaskAction(MainFrame.this)));
                    popup.add(new JMenuItem(new DeleteTaskAction(MainFrame.this, taskService)));
                    popup.addSeparator();
                    popup.add(new JMenuItem(new ToggleCompletedAction(MainFrame.this)));
                }

                popup.show(categoryTree, x, y);
            }
        });

        // layout
        JSplitPane split = new JSplitPane(
            JSplitPane.HORIZONTAL_SPLIT,
            new JScrollPane(categoryTree),
            new JScrollPane(taskTable)
        );
        split.setDividerLocation(200);

        JPanel top = new JPanel(new FlowLayout(FlowLayout.LEFT));
        top.add(new JLabel("Filter:"));
        top.add(filterField);

        setLayout(new BorderLayout());
        add(top, BorderLayout.NORTH);
        add(split, BorderLayout.CENTER);

        // menu bar
        JMenuBar mb = new JMenuBar();
        mb.add(createFileMenu());
        mb.add(createListMenu());
        setJMenuBar(mb);

        // live filter
        filterField.getDocument().addDocumentListener(new DocumentListener() {
            public void insertUpdate(DocumentEvent e) { applyFilter(); }
            public void removeUpdate(DocumentEvent e) { applyFilter(); }
            public void changedUpdate(DocumentEvent e) { applyFilter(); }
        });

        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setSize(800, 600);
        setLocationRelativeTo(null);
    }

    private JMenu createFileMenu() {
        JMenu m = new JMenu("File");
        m.add(new ImportAction(this));
        m.add(new ExportAction(this));
        return m;
    }

    private JMenu createListMenu() {
        JMenu m = new JMenu("List");
        m.add(new ResetOrderAction(this));
        return m;
    }

    // exposed for actions:

    public TaskService getTaskService() {
        return taskService;
    }

    public JTable getTaskTable() {
        return taskTable;
    }

    public TaskTableModel getTaskTableModel() {
        return taskTableModel;
    }

    public List<Task> getMasterTasks() {
        return masterTasks;
    }

    public RootGroup createImportedRoot(List<Category> cats) {
        RootGroup imp = new RootGroup("Imported", "#0077CC");
        imp.getCategories().addAll(cats);
        return imp;
    }

    public boolean deleteRecursively(File f) {
        if (f.isDirectory()) {
            File[] ch = f.listFiles();
            if (ch != null) for (File c : ch) if (!deleteRecursively(c)) return false;
        }
        return f.delete();
    }

    public void refreshTreeAll() {
        categoryTreeModel.updateRoots(taskService.getAllRoots());
        showTasks(getAllTasks());
        expandAll();
    }

    public void refreshAfterChange(Category cat) {
        categoryTreeModel.updateRoots(taskService.getAllRoots());
        if (cat != null) showTasks(cat.getTasks());
        else showTasks(getAllTasks());
        expandAll();
    }

    public void showError(Exception ex) {
        JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }

    private void applyFilter() {
        String t = filterField.getText().trim().toLowerCase();
        if (t.isEmpty()) refreshTreeAll();
        else taskTableModel.setTasks(
            getAllTasks().stream()
                .filter(x -> x.getTitle().toLowerCase().contains(t)
                          || x.getDescription().toLowerCase().contains(t))
                .toList()
        );
    }

    private void showTasks(List<Task> tasks) {
        taskTableModel.setTasks(tasks);
    }

    private List<Task> getAllTasks() {
        return taskService.getAllRoots().stream()
            .flatMap(r -> r.getCategories().stream())
            .flatMap(c -> c.getTasks().stream())
            .toList();
    }

    private List<Task> getTasksFromRoot(RootGroup r) {
        return r.getCategories().stream()
            .flatMap(c -> c.getTasks().stream())
            .toList();
    }

    public RootGroup getSelectedRoot() {
        TreePath p = categoryTree.getSelectionPath();
        if (p == null) return null;
        Object o = ((DefaultMutableTreeNode)p.getLastPathComponent()).getUserObject();
        return (o instanceof RootGroup) ? (RootGroup)o : null;
    }

    public Category getSelectedCategory() {
        TreePath p = categoryTree.getSelectionPath();
        if (p == null) return null;
        Object o = ((DefaultMutableTreeNode)p.getLastPathComponent()).getUserObject();
        return (o instanceof Category) ? (Category)o : null;
    }

    public Task getSelectedTask() {
        TreePath p = categoryTree.getSelectionPath();
        if (p == null) return null;
        Object o = ((DefaultMutableTreeNode)p.getLastPathComponent()).getUserObject();
        return (o instanceof Task) ? (Task)o : null;
    }

    public void expandAll() {
        SwingUtilities.invokeLater(() -> {
            for (int i = 0; i < categoryTree.getRowCount(); i++) {
                categoryTree.expandRow(i);
            }
        });
    }

    public JTree getCategoryTree() {
        return categoryTree;
    }
}
